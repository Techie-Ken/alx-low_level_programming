!<arch>
0-isupper.c/    0           0     0     644     184       `
#include "main.h"
/**
* _isupper - checks upper case
* @c: print int
* Return: give 1 or 0
*/

int _isupper(int c)
{
if (c >= 'A' && c <= 'Z')
{
return (1);
}

else
{
return (0);
}

}
0-memset.c/     0           0     0     644     293       `
#include "main.h"
#include <stdio.h>

/**
 * _memset - fills memory with a constant type
 * @s: the buffer
 * @b: the constant
 * @n: the size
 *
 * Return: Nothing.
 */
char *_memset(char *s, char b, unsigned int n)
{
unsigned int i;

	for (i = 0; i < n; i++)
		*(s + i) = b;

	return (s);
}

0-strcat.c/     0           0     0     644     334       `
#include "main.h"

/**
 * _strcat - concat a string to another
 * @dest: The destination array
 * @src: The source array
 *
 * Return: none
 */
char *_strcat(char *dest, char *src)
{
	int i, l;

	l = 0;
	while (dest[l] != '\0')
		l++;

	for (i = 0; src[i] != '\0'; i++)
		dest[l + i] = src[i];
	dest[l + i] = '\0';

	return (dest);
}
100-atoi.c/     0           0     0     644     11        `
Dummy File

1-isdigit.c/    0           0     0     644     239       `
#include "main.h"
/**
* _isdigit - checkes if the no is b/n 0 to 9
* @c: input no
* Return: 1 if is a number (0 to 9),0 in other case.
*/
int _isdigit(int c)
{
if (c >= 48 && c <= 57)
{
return (1);
}
else
{
return (0);
}
_putchar('\n');
}

1-memcpy.c/     0           0     0     644     315       `
#include "main.h"
#include <stdio.h>

/**
 * _memcpy - poies memry area
 * @dest: the buffer destiny
 * @src: the buffer source
 * @n: the size
 *
 * Return: Nothing.
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
unsigned int i;

	for (i = 0; i < n; i++)
		*(dest + i) = *(src + i);

	return (dest);
}

1-strncat.c/    0           0     0     644     382       `
#include "main.h"

/**
 * _strncat - concat a string to another
 * @dest: The destination array
 * @src: The source array
 * @n: The n quantity expected
 *
 * Return: none
 */
char *_strncat(char *dest, char *src, int n)
{
	int i, l;

	l = 0;
	while (dest[l] != '\0')
		l++;

	for (i = 0; i < n && src[i] != '\0'; i++)
		dest[l + i] = src[i];
	dest[l + i] = '\0';
	return (dest);
}
2-strchr.c/     0           0     0     644     337       `
#include "main.h"

/**
 * _strchr - locates a character in a string.
 * @s: the buffer source
 * @c: the char to find
 *
 * Return: The pointer to first occurency or NULL.
 */
char *_strchr(char *s, char c)
{
int i = 0, j;

	while (*(s + i) != '\0')
		i++;
	for (j = 0; j <= i; j++, s++)
		if (*s == c)
			return (s);

	return (NULL);
}

2-strlen.c/     0           0     0     644     242       `
#include "main.h"

/**
 * _strlen - Return the qty f bytes that a string has
 * @s: The string
 *
 * Return: The long of the string as an integer number
 */
int _strlen(char *s)
{
	int q = 0;

	while (*(s + q) != '\0')
		q++;

	return (q);
}
2-strncpy.c/    0           0     0     644     351       `
#include "main.h"

/**
 * _strncpy - copy a string to another
 * @dest: The destination array
 * @src: The source array
 * @n: The n quantity expected
 *
 * Return: none
 */
char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; i < n && src[i] != '\0'; i++)
		dest[i] = src[i];
	for ( ; i < n; i++)
		dest[i] = '\0';

	return (dest);
}

3-islower.c/    0           0     0     644     183       `
#include "main.h"
/**
*  * _islower - checks for lower case letter
*  * @c : character to check the case
*  * Return:0 or 1
*/
int _islower(int c)

{
	return (c >= 97 && c <= 122);
}

3-puts.c/       0           0     0     644     198       `
#include "main.h"
/**
 *  * _puts -> this is a function that puts
 *  * @str: a param to _puts function
 */
void _puts(char *str)
{
for (; *str != '\0'; str++)
{
_putchar(*str);
}
_putchar('\n');
}
3-strcmp.c/     0           0     0     644     495       `
#include "main.h"

/**
 * _strcmp - Compare a string to another
 * @s1: The first array
 * @s2: The second array
 *
 * Return: none
 */
int _strcmp(char *s1, char *s2)
{
	int i = 0, r = 0;

	while (s1[i] != '\0' && s2[i] != '\0')
	{
		r = s1[i] - s2[i];
		if (r != 0)
			return (r);
		if (s1[i + 1] == '\0' && s2[i + 1] != '\0')
			r = s1[i + 1] - s2[i + 1];
		else if (s1[i + 1] != '\0' && s2[i + 1] == '\0')
			r = s1[i + 1] - s2[i + 1];
		if (r != 0)
			return (r);
		i++;
	}

	return (r);
}

3-strspn.c/     0           0     0     644     389       `
#include "main.h"

/**
 * _strspn - gets the length of a prefix substring.
 * @s: the buffer source
 * @accept: the char to find
 *
 * Return: The quantity of bytes contents
 */
unsigned int _strspn(char *s, char *accept)
{
int i = 0;
unsigned int c = 0;

	for (; *s != '\0' && *s != ' '; s++)
		for (i = 0; *(accept + i) != '\0'; i++)
			if (*s == *(accept + i))
				c++;

	return (c);
}

4-isalpha.c/    0           0     0     644     208       `
#include "main.h"
/**
*  * _isalpha - checks if the letter is lower case
*  * @c : character to check
*  * Return:0 or 1
*
*/
int _isalpha(int c)

{
	return ((c >= 97 && c <= 122) || (c >= 65 && c <= 90));
}
4-strpbrk.c/    0           0     0     644     366       `
#include "main.h"

/**
 * _strpbrk - searches a string for any of a set of bytes.
 *@s: the buffer source
 * @accept: the char to find
 *
 * Return: The quantity of bytes contents
 */
char *_strpbrk(char *s, char *accept)
{
int i = 0;

	for (; *s != '\0'; s++)
		for (i = 0; *(accept + i) != '\0'; i++)
			if (*s == *(accept + i))
				return (s);

	return (NULL);
}
5-strstr.c/     0           0     0     644     537       `
#include "main.h"

/**
 * _strstr - locates a substring.
 * @haystack: the buffer source
 * @needle: the string to find
 *
 * Return: The quantity of bytes contents
 */
char *_strstr(char *haystack, char *needle)
{
unsigned int i = 0, j;
char *h = haystack, *n = needle;

	while (needle[i] != '\0')
		i++;

	while (*haystack != '\0')
	{
		h = haystack;
		n = needle;
		for (j = 0; j <= i && *h == *n && *h != '\0' && *n != '\0'; j++)
		{
			h++;
			n++;
		}
		if ((j - i) == 0)
			return (haystack);
		haystack++;
	}

	return (NULL);
}


6-abs.c/        0           0     0     644     156       `
#include "main.h"
/**
*  * _abs - return value
*  * @n : the number to be checked
*  * Return:0 or 1
*/
int _abs(int n)

{
	return (n >= 0 ? n : n * -1);
}
9-strcpy.c/     0           0     0     644     282       `
#include "main.h"

/**
 * _strcpy - copy a string into another
 * @dest: The destination array
 * @src: The source array
 *
 * Return: none
 */
char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0; src[i] != '\0'; i++)
		dest[i] = src[i];
	dest[i] = '\0';

	return (dest);
}
main.h/         0           0     0     644     651       `
int _putchar(char c);
int _islower(int c);
int _isalpha(int c);
int _abs(int n);
int _isupper(int c);
int _isdigit(int c);
int _strlen(char *s);
void _puts(char *s);
char *_strcpy(char *dest, char *src);
int _atoi(char *s);
char *_strcat(char *dest, char *src);
char *_strncat(char *dest, char *src, int n);
char *_strncpy(char *dest, char *src, int n);
int _strcmp(char *s1, char *s2);
char *_memset(char *s, char b, unsigned int n);
char *_memcpy(char *dest, char *src, unsigned int n);
char *_strchr(char *s, char c);
unsigned int _strspn(char *s, char *accept);
char *_strpbrk(char *s, char *accept);
char *_strstr(char *haystack, char *needle);


_putchar.c/     0           0     0     644     305       `
#include <unistd.h>



/**
 *
 *  * _putchar - writes the character c to stdout
 *
 *   * @c: The character to print
 *
 *    *
 *
 *     * Return: On success 1.
 *
 *      * On error, -1 is returned, and errno is set appropriately.
 *
 *       */

int _putchar(char c)

{

		return (write(1, &c, 1));

}

README.md/      0           0     0     644     284       `
File libmy.a is a static library.

File create_static_lib.sh is a script that creates a static library called liball.a from all the .c files that are in the current directory.

File main.h is a header file containing all the prototypes of the functions stored in the libmy.a library.
libmy.a*.o/     0           0     0     644     8         `
!<arch>
